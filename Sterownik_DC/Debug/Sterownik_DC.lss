
Sterownik_DC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000001e0  00000274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800064  00800064  00000278  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000002d3  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000015d  00000000  00000000  000005f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002b4  00000000  00000000  00000754  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00000a08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000238  00000000  00000000  00000a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000140  00000000  00000000  00000ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00000de4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2b 00 	jmp	0x56	; 0x56 <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

00000054 <__trampolines_end>:
  54:	c7 af       	std	Z+63, r28	; 0x3f

00000056 <__ctors_end>:
  56:	11 24       	eor	r1, r1
  58:	1f be       	out	0x3f, r1	; 63
  5a:	cf e5       	ldi	r28, 0x5F	; 95
  5c:	d8 e0       	ldi	r29, 0x08	; 8
  5e:	de bf       	out	0x3e, r29	; 62
  60:	cd bf       	out	0x3d, r28	; 61

00000062 <__do_copy_data>:
  62:	10 e0       	ldi	r17, 0x00	; 0
  64:	a0 e6       	ldi	r26, 0x60	; 96
  66:	b0 e0       	ldi	r27, 0x00	; 0
  68:	e0 ee       	ldi	r30, 0xE0	; 224
  6a:	f1 e0       	ldi	r31, 0x01	; 1
  6c:	02 c0       	rjmp	.+4      	; 0x72 <__do_copy_data+0x10>
  6e:	05 90       	lpm	r0, Z+
  70:	0d 92       	st	X+, r0
  72:	a4 36       	cpi	r26, 0x64	; 100
  74:	b1 07       	cpc	r27, r17
  76:	d9 f7       	brne	.-10     	; 0x6e <__do_copy_data+0xc>

00000078 <__do_clear_bss>:
  78:	20 e0       	ldi	r18, 0x00	; 0
  7a:	a4 e6       	ldi	r26, 0x64	; 100
  7c:	b0 e0       	ldi	r27, 0x00	; 0
  7e:	01 c0       	rjmp	.+2      	; 0x82 <.do_clear_bss_start>

00000080 <.do_clear_bss_loop>:
  80:	1d 92       	st	X+, r1

00000082 <.do_clear_bss_start>:
  82:	a6 36       	cpi	r26, 0x66	; 102
  84:	b2 07       	cpc	r27, r18
  86:	e1 f7       	brne	.-8      	; 0x80 <.do_clear_bss_loop>
  88:	0e 94 da 00 	call	0x1b4	; 0x1b4 <main>
  8c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <timer1_initialize>:
void timer1_initialize(void)
{

// To set the prescaler to divide the frequency per 1024
	//TCCR1B |= (1<<CS12) | (1<<CS10); 
	TCCR1B |= (1<<CS11); // per 8
  94:	8e b5       	in	r24, 0x2e	; 46
  96:	82 60       	ori	r24, 0x02	; 2
  98:	8e bd       	out	0x2e, r24	; 46
//  To set the Waveform Generator Mode to 8-bit Fast PWM
	TCCR1A |= (1<<WGM10);
  9a:	8f b5       	in	r24, 0x2f	; 47
  9c:	81 60       	ori	r24, 0x01	; 1
  9e:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<WGM12);
  a0:	8e b5       	in	r24, 0x2e	; 46
  a2:	88 60       	ori	r24, 0x08	; 8
  a4:	8e bd       	out	0x2e, r24	; 46
//  Set the PINs to zero, after the compare match event,
// when the minimum value is being reached 
	TCCR1A |= (1<<COM1A1) | (1<<COM1B1) ;	
  a6:	8f b5       	in	r24, 0x2f	; 47
  a8:	80 6a       	ori	r24, 0xA0	; 160
  aa:	8f bd       	out	0x2f, r24	; 47

// Set to the direction registers, PIN 4 and PIN5 
	DDRD |= (1<<PD4) | (1<<PD5);
  ac:	81 b3       	in	r24, 0x11	; 17
  ae:	80 63       	ori	r24, 0x30	; 48
  b0:	81 bb       	out	0x11, r24	; 17
	
//Initialize output compare registers
	OCR1A =	PWMDEF;
  b2:	86 e6       	ldi	r24, 0x66	; 102
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	9b bd       	out	0x2b, r25	; 43
  b8:	8a bd       	out	0x2a, r24	; 42
	OCR1B = PWMGND;	
  ba:	19 bc       	out	0x29, r1	; 41
  bc:	18 bc       	out	0x28, r1	; 40
  be:	08 95       	ret

000000c0 <scan_key>:
//To chose from the tables a proper value for a proper LED display
//Inline do not recall the function just puts the code of the function there

void scan_key(void)
{
	uint8_t temp_dir = dir_flag;
  c0:	20 91 62 00 	lds	r18, 0x0062
	uint8_t temp_hand = handler;
  c4:	30 91 64 00 	lds	r19, 0x0064
	uint8_t temp_pwm = pwm_handler;
  c8:	90 91 60 00 	lds	r25, 0x0060
	
	uint8_t counter=0;
	if(counter==0)
	{
		pin_reader = ((~PIND) & 0x0F);
  cc:	80 b3       	in	r24, 0x10	; 16
  ce:	80 95       	com	r24
  d0:	8f 70       	andi	r24, 0x0F	; 15
  d2:	80 93 65 00 	sts	0x0065, r24
		// Set the column and calculate the key number
		if((pin_reader == 0x01) && ( (temp_dir & temp_hand) == 0))
  d6:	80 91 65 00 	lds	r24, 0x0065
  da:	81 30       	cpi	r24, 0x01	; 1
  dc:	21 f4       	brne	.+8      	; 0xe6 <scan_key+0x26>
  de:	83 2f       	mov	r24, r19
  e0:	82 23       	and	r24, r18
  e2:	21 f5       	brne	.+72     	; 0x12c <scan_key+0x6c>
  e4:	17 c0       	rjmp	.+46     	; 0x114 <scan_key+0x54>
		{
			temp_dir = 0xFF;
			temp_hand = 0x00;
		}
		else if((pin_reader ==0x02) && ( (dir_flag & temp_hand) == 0))
  e6:	80 91 65 00 	lds	r24, 0x0065
  ea:	82 30       	cpi	r24, 0x02	; 2
  ec:	19 f4       	brne	.+6      	; 0xf4 <scan_key+0x34>
  ee:	83 2f       	mov	r24, r19
  f0:	82 23       	and	r24, r18
  f2:	99 f0       	breq	.+38     	; 0x11a <scan_key+0x5a>
		{
			temp_dir = 0x00;
			temp_hand = 0xFF;
		}
		else if((pin_reader == 0x04) && ( temp_pwm > 0))
  f4:	80 91 65 00 	lds	r24, 0x0065
  f8:	84 30       	cpi	r24, 0x04	; 4
  fa:	21 f4       	brne	.+8      	; 0x104 <scan_key+0x44>
  fc:	99 23       	and	r25, r25
  fe:	c9 f0       	breq	.+50     	; 0x132 <scan_key+0x72>
		{
			temp_pwm--;
 100:	91 50       	subi	r25, 0x01	; 1
 102:	0d c0       	rjmp	.+26     	; 0x11e <scan_key+0x5e>
		}
		else if((pin_reader == 0x08) && ( temp_pwm < 255))
 104:	80 91 65 00 	lds	r24, 0x0065
 108:	88 30       	cpi	r24, 0x08	; 8
 10a:	49 f4       	brne	.+18     	; 0x11e <scan_key+0x5e>
 10c:	9f 3f       	cpi	r25, 0xFF	; 255
 10e:	39 f0       	breq	.+14     	; 0x11e <scan_key+0x5e>
		{
			temp_pwm++;
 110:	9f 5f       	subi	r25, 0xFF	; 255
 112:	05 c0       	rjmp	.+10     	; 0x11e <scan_key+0x5e>
		pin_reader = ((~PIND) & 0x0F);
		// Set the column and calculate the key number
		if((pin_reader == 0x01) && ( (temp_dir & temp_hand) == 0))
		{
			temp_dir = 0xFF;
			temp_hand = 0x00;
 114:	30 e0       	ldi	r19, 0x00	; 0
	{
		pin_reader = ((~PIND) & 0x0F);
		// Set the column and calculate the key number
		if((pin_reader == 0x01) && ( (temp_dir & temp_hand) == 0))
		{
			temp_dir = 0xFF;
 116:	2f ef       	ldi	r18, 0xFF	; 255
 118:	02 c0       	rjmp	.+4      	; 0x11e <scan_key+0x5e>
			temp_hand = 0x00;
		}
		else if((pin_reader ==0x02) && ( (dir_flag & temp_hand) == 0))
		{
			temp_dir = 0x00;
			temp_hand = 0xFF;
 11a:	3f ef       	ldi	r19, 0xFF	; 255
			temp_dir = 0xFF;
			temp_hand = 0x00;
		}
		else if((pin_reader ==0x02) && ( (dir_flag & temp_hand) == 0))
		{
			temp_dir = 0x00;
 11c:	20 e0       	ldi	r18, 0x00	; 0

		}
		counter=100;
	} else counter--;
	
	dir_flag = temp_dir;
 11e:	20 93 62 00 	sts	0x0062, r18
	handler = temp_hand;
 122:	30 93 64 00 	sts	0x0064, r19
	pwm_handler = temp_pwm;
 126:	90 93 60 00 	sts	0x0060, r25
 12a:	08 95       	ret
		if((pin_reader == 0x01) && ( (temp_dir & temp_hand) == 0))
		{
			temp_dir = 0xFF;
			temp_hand = 0x00;
		}
		else if((pin_reader ==0x02) && ( (dir_flag & temp_hand) == 0))
 12c:	80 91 65 00 	lds	r24, 0x0065
 130:	e1 cf       	rjmp	.-62     	; 0xf4 <scan_key+0x34>
		}
		else if((pin_reader == 0x04) && ( temp_pwm > 0))
		{
			temp_pwm--;
		}
		else if((pin_reader == 0x08) && ( temp_pwm < 255))
 132:	80 91 65 00 	lds	r24, 0x0065
 136:	88 30       	cpi	r24, 0x08	; 8
 138:	91 f7       	brne	.-28     	; 0x11e <scan_key+0x5e>
 13a:	ea cf       	rjmp	.-44     	; 0x110 <scan_key+0x50>

0000013c <pwm_set>:
}

void pwm_set(void)
{
	//OCR1A = 255;
	if (pwm_flag == 0xff) OCR1A = pwm_handler;
 13c:	80 91 61 00 	lds	r24, 0x0061
 140:	8f 3f       	cpi	r24, 0xFF	; 255
 142:	29 f4       	brne	.+10     	; 0x14e <pwm_set+0x12>
 144:	80 91 60 00 	lds	r24, 0x0060
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	9b bd       	out	0x2b, r25	; 43
 14c:	8a bd       	out	0x2a, r24	; 42
	if (pwm_flag == 0x00) OCR1B = pwm_handler;
 14e:	80 91 61 00 	lds	r24, 0x0061
 152:	81 11       	cpse	r24, r1
 154:	05 c0       	rjmp	.+10     	; 0x160 <pwm_set+0x24>
 156:	80 91 60 00 	lds	r24, 0x0060
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	99 bd       	out	0x29, r25	; 41
 15e:	88 bd       	out	0x28, r24	; 40
 160:	08 95       	ret

00000162 <show_direction>:
void show_direction( void)

{
	uint8_t temp = 0xFF;
	uint8_t pwm_holder;
	PORTA = 0xFF;
 162:	8f ef       	ldi	r24, 0xFF	; 255
 164:	8b bb       	out	0x1b, r24	; 27
	if(dir_flag == 0xFF)
 166:	80 91 62 00 	lds	r24, 0x0062
 16a:	8f 3f       	cpi	r24, 0xFF	; 255
 16c:	79 f4       	brne	.+30     	; 0x18c <show_direction+0x2a>
	{
		temp = pgm_read_byte(&DIRECTION[0]);
 16e:	e4 e5       	ldi	r30, 0x54	; 84
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	e4 91       	lpm	r30, Z

		pwm_holder = OCR1A;
 174:	8a b5       	in	r24, 0x2a	; 42
 176:	9b b5       	in	r25, 0x2b	; 43
		DDRD &= ~(1<<PD4);
 178:	8c 98       	cbi	0x11, 4	; 17
		DDRD = (1<<PD5);
 17a:	20 e2       	ldi	r18, 0x20	; 32
 17c:	21 bb       	out	0x11, r18	; 17
		OCR1B = pwm_holder;
 17e:	99 27       	eor	r25, r25
 180:	99 bd       	out	0x29, r25	; 41
 182:	88 bd       	out	0x28, r24	; 40
		pwm_flag = 0xFF;
 184:	8f ef       	ldi	r24, 0xFF	; 255
 186:	80 93 61 00 	sts	0x0061, r24
 18a:	01 c0       	rjmp	.+2      	; 0x18e <show_direction+0x2c>
}

void show_direction( void)

{
	uint8_t temp = 0xFF;
 18c:	ef ef       	ldi	r30, 0xFF	; 255
		DDRD &= ~(1<<PD4);
		DDRD = (1<<PD5);
		OCR1B = pwm_holder;
		pwm_flag = 0xFF;
	}
	if(dir_flag == 0x00)
 18e:	80 91 62 00 	lds	r24, 0x0062
 192:	81 11       	cpse	r24, r1
 194:	0d c0       	rjmp	.+26     	; 0x1b0 <show_direction+0x4e>
	{
		temp = pgm_read_byte(&DIRECTION[1]);
 196:	e5 e5       	ldi	r30, 0x55	; 85
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	e4 91       	lpm	r30, Z
		pwm_holder = OCR1B;
 19c:	88 b5       	in	r24, 0x28	; 40
 19e:	99 b5       	in	r25, 0x29	; 41
		DDRD &= ~(1<<PD5);
 1a0:	8d 98       	cbi	0x11, 5	; 17
		DDRD = (1<<PD4);
 1a2:	20 e1       	ldi	r18, 0x10	; 16
 1a4:	21 bb       	out	0x11, r18	; 17
		OCR1A = pwm_holder;
 1a6:	99 27       	eor	r25, r25
 1a8:	9b bd       	out	0x2b, r25	; 43
 1aa:	8a bd       	out	0x2a, r24	; 42
		pwm_flag = 0x00;
 1ac:	10 92 61 00 	sts	0x0061, r1
	}
	PORTA = temp;
 1b0:	eb bb       	out	0x1b, r30	; 27
 1b2:	08 95       	ret

000001b4 <main>:
}


int main(void)
{
    timer1_initialize();
 1b4:	0e 94 4a 00 	call	0x94	; 0x94 <timer1_initialize>
	DDRA = 0xFF;
 1b8:	8f ef       	ldi	r24, 0xFF	; 255
 1ba:	8a bb       	out	0x1a, r24	; 26
	PORTD |= 0x0F;
 1bc:	82 b3       	in	r24, 0x12	; 18
 1be:	8f 60       	ori	r24, 0x0F	; 15
 1c0:	82 bb       	out	0x12, r24	; 18
    while (1) 

    {
		scan_key();
 1c2:	0e 94 60 00 	call	0xc0	; 0xc0 <scan_key>
		show_direction();
 1c6:	0e 94 b1 00 	call	0x162	; 0x162 <show_direction>
		pwm_set();
 1ca:	0e 94 9e 00 	call	0x13c	; 0x13c <pwm_set>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ce:	83 ec       	ldi	r24, 0xC3	; 195
 1d0:	99 e0       	ldi	r25, 0x09	; 9
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <main+0x1e>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <main+0x24>
 1d8:	00 00       	nop
 1da:	f3 cf       	rjmp	.-26     	; 0x1c2 <main+0xe>

000001dc <_exit>:
 1dc:	f8 94       	cli

000001de <__stop_program>:
 1de:	ff cf       	rjmp	.-2      	; 0x1de <__stop_program>
